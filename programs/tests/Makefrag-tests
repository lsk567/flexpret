#--------------------------------------------------------------------
# ISA tests from riscv-tests 
#--------------------------------------------------------------------
riscv-tests:
	git submodule update --init --recursive \
	&& cd $(riscv_tests_dir) \
	&& autoconf \
	&& ./configure --prefix=${RISCV}/target \
	&& $(MAKE) isa

rv64ui-p-asm-tests = \
	rv64ui-p-simple \
	rv64ui-p-add \
	rv64ui-p-addi \
	rv64ui-p-and \
	rv64ui-p-andi \
	rv64ui-p-auipc \
	rv64ui-p-beq \
	rv64ui-p-bge \
	rv64ui-p-bgeu \
	rv64ui-p-blt \
	rv64ui-p-bltu \
	rv64ui-p-bne \
	rv64ui-p-fence_i \
	rv64ui-p-jal \
	rv64ui-p-jalr \
	rv64ui-p-lb \
	rv64ui-p-lbu \
	rv64ui-p-lh \
	rv64ui-p-lhu \
	rv64ui-p-lui \
	rv64ui-p-lw \
	rv64ui-p-or \
	rv64ui-p-ori \
	rv64ui-p-sb \
	rv64ui-p-sh \
	rv64ui-p-sw \
	rv64ui-p-sll \
	rv64ui-p-slli \
	rv64ui-p-slt \
	rv64ui-p-slti \
	rv64ui-p-sra \
	rv64ui-p-srai \
	rv64ui-p-srl \
	rv64ui-p-srli \
	rv64ui-p-sub \
	rv64ui-p-xor \
	rv64ui-p-xori \
	rv64ui-p-addw \
	rv64ui-p-addiw \
	rv64ui-p-ld \
	rv64ui-p-lwu \
	rv64ui-p-sd \
	rv64ui-p-slliw \
	rv64ui-p-sllw \
	rv64ui-p-sltiu \
	rv64ui-p-sltu \
	rv64ui-p-sraiw \
	rv64ui-p-sraw \
	rv64ui-p-srliw \
	rv64ui-p-srlw \
	rv64ui-p-subw

# Generate .hex files
$(addprefix $(isa_riscv_tests_dir)/, $(addsuffix .hex, $(rv64ui-p-asm-tests))): $(isa_riscv_tests_dir)/%.hex: $(isa_riscv_tests_dir)/%.dump 
	$(scripts_dir)/c/parse_disasm.py $< readmemh > $@

# Generate .out files
$(addprefix $(isa_riscv_tests_dir)/, $(addsuffix .out, $(rv64ui-p-asm-tests))): $(isa_riscv_tests_dir)/%.out: $(isa_riscv_tests_dir)/%.hex $(emu_dir)/$(emu)
	@echo "Running $<"
	$(emu_dir)/$(emu) +ispm=$< > $@ 2>&1

run-rv64ui-p-asm-tests: $(addprefix $(isa_riscv_tests_dir)/, $(addsuffix .out, $(rv64ui-p-asm-tests)))

run-asm-tests: riscv-tests run-rv64ui-p-asm-tests


#--------------------------------------------------------------------
# Basic C tests 
#--------------------------------------------------------------------
basic-c-tests = \
	add \
	fib \
	malloc \
	calloc

# param1: test name
# param2: parent directory
define compile_template
$(2)/$(1).riscv: $(wildcard $(2)/$(1)/*) $(wildcard $$(clib_dir)/*)
	# Compile the program into .riscv.
	$$(RISCV_GCC) $$(incs) $$(RISCV_GCC_OPTS) -o $$@ $$(clib_dir)/start.S $(wildcard $(2)/$(1)/*.c) $$(RISCV_LINK_OPTS)
endef

# Expand .riscv targets.
$(foreach test,$(basic-c-tests),$(eval $(call compile_template,$(test),$(c_tests_dir))))

# Create .dump.txt files.
$(addprefix $(c_tests_dir)/, $(addsuffix .dump.txt, $(basic-c-tests))): $(c_tests_dir)/%.dump.txt: $(c_tests_dir)/%.riscv
	$(RISCV_OBJDUMP) $< > $@

# Generate .hex files
$(addprefix $(c_tests_dir)/, $(addsuffix .hex, $(basic-c-tests))): $(c_tests_dir)/%.hex: $(c_tests_dir)/%.dump.txt 
	$(scripts_dir)/c/parse_disasm.py $< readmemh > $@
	
# .out files contains the printf via the tohost csr,
# instead of the cycle-by-cycle info, which is implemented in Rocketchip.
$(addprefix $(c_tests_dir)/, $(addsuffix .out, $(basic-c-tests))): $(c_tests_dir)/%.out: $(c_tests_dir)/%.hex $(emu_dir)/$(emu)
	@echo "Running $<"
	$(emu_dir)/$(emu) +ispm=$< > $@ 2>&1

run-c-tests: $(addprefix $(c_tests_dir)/, $(addsuffix .out, $(basic-c-tests)))
